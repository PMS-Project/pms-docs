ChatServer/Client (Chat-O-Mat4000) P.M.S. (Perl Messaging System)

Html/JS Client -> Websocket oder Polling (alternativ Perl Client)
  -> Befehle: /connect ip:port
              /open <channel>
  -> nur wenn Zeit ist multiple chats

Perl Server 
  -> User werden in der DB gespeichert
  -> Channel + Backlog in der DB
  -> Userrechte (zB Wer darf Channel erstellen, Channel OPs (wenn noch Zeit ist)
  -> Usergruppen denen man Rechte zuordnen kann (Admins, User  verlinkung aus der Channel Tabelle welche Gruppe und User ChannelOp ist)
  -> Async IO ist Threads vorzuziehen 
  -> Befehle:
	/create <channel>   -> erstellt channel
	/delete <channel>   -> löscht channel 
	/nick   <nickname>  -> anon user
        /ident  <nick> <pass> -> identifiziert administrator
	----Wenn noch Zeit ist-----
	/kick   <user>
	/ban    <ip>
	/whois  <user>
	/message <user>
	Regel: 1.Zeichen muss / sein ansonsten -> Nachricht
    -> Erweiterbarkeit:
	    -> Message Queue (Module können sich in der Queue registrieren und so Messages parsen)
	    -> Module registrieren sich über _module_init()
	    -> Konfiguration über ini File zB:
	       [Modules]

	
  
  Links:
  - http://dev.perl.org/perl6/rfc/47.html#___top
  - https://github.com/vti/protocol-websocket
  - http://search.cpan.org/~vti/Protocol-WebSocket-0.00906/lib/Protocol/WebSocket.pm
  - http://showmetheco.de/articles/2011/2/diving-into-html5-with-websockets-and-perl.html
  Perl Debugger:
  - http://perldoc.perl.org/perldebug.html
  Dynamischen Laden von Modulen:
  - http://search.cpan.org/~bingos/Module-Load/lib/Module/Load.pm
  - http://docstore.mik.ua/orelly/perl/cookbook/ch13_08.htm

  

ChatMessages:
  -> /open pms
  <- OK \n
  <- <channel>;<date>;<name>;<message>
  <- <channel>;<date>;<name>;<message>
  <- <channel>;<date>;<name>;<message>
  <- <channel>;<date>;<name>;<message>
  <- <channel>;<date>;<name>;<message>
  <- <channel>;<date>;<name>;<message>
  <- <channel>;<date>;<name>;<message>
  <- <channel>;<date>;<name>;<message>
  <- <channel>;<date>;<name>;<message>

Mögliches Protokoll:
  Netstring + Base64 encoding eines UTF8 Strings (Netstring ist nur ASCII tauglich)
  http://cr.yp.to/proto/netstrings.txt
  ->Perl AnyEvent hat Kompatibilität zu Netstring

Datenbank:
    Users{
      int id;
      string name;
      bytes  password;
    }

    Groups{
      int id;
      string name;
    }

    Roles{
      int id;
      string rolename;
    }

    User_to_Groups{
      ref userId;
      ref groupId;
    }

    User_to_Roles{
      ref nameId;
      ref roleId;
    }

    Groups_to_Roles{
      ref groupId;
      ref roleId;
    }

    Settings{
      string key;
      string value;
    }
    Channels{
        ref ChannelOp;
        string ChannelName;
        string ChannelTopic;
    }

    Backlog{
      int id;
      ref channelId;
      ref userId;
      date messageDate;
    }

    
    
    Config.json:
    
    {
      "ConnectionProvider" : {
        "WebSocket" : {
          "port" : 8888
        },
        "TCPSocket" : {
          "port" : 15000
        }
      }
      "modules" :{
        
        "Database" : {
          "server" : "localhost:port",
          "database" : "dbName",
          "user"     : "username",
          "password" : "pw"
        },
        
        "Auth" : {
          "requires" : "Database"
        },
        
        "Security" : {
          "canConnect" : ["192.168.1.*"],
          "canNotConnect" : ["*"]
        },
        
        "Motd" : {
          "message" : ["Line 1: This is the motd thing",
                     "Line 2: This is the motd thing",
                     "Line 3: This is the motd thing"]
        }
      }
    }
    
    
